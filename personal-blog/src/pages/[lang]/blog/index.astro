---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Header from '../../../components/Header.astro';
import Footer from '../../../components/Footer.astro';
import SearchFilter from '../../../components/SearchFilter.astro';
import SearchSuggestions from '../../../components/SearchSuggestions.astro';
import SearchAnalytics from '../../../components/SearchAnalytics.astro';
import { getCollection } from 'astro:content';
import { getLanguageFromUrl, supportedLanguages, type Language } from '../../../i18n/config';
import { getTranslation } from '../../../i18n/index';

// Get language from URL
const lang = getLanguageFromUrl(Astro.url);

// Validate language
if (!supportedLanguages.includes(lang)) {
  return Astro.redirect('/blog');
}

// Get all blog posts
const posts = await getCollection('blog');
const sortedPosts = posts.sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

// Get unique tags
const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))];

// Format dates based on language
const formatDate = (date: Date, language: Language) => {
  return new Intl.DateTimeFormat(language === 'en' ? 'en-US' : language === 'id' ? 'id-ID' : 'en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};
---

<BaseLayout 
  title={getTranslation('blog.title', lang)} 
  description={getTranslation('blog.subtitle', lang)}
  lang={lang}
>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <Header currentLang={lang} />
    
    <!-- Blog Header -->
    <section class="bg-gradient-to-r from-primary-600 to-secondary-600 text-white py-16">
      <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto text-center">
          <h1 class="text-4xl md:text-5xl font-bold mb-6">
            {getTranslation('blog.title', lang)}
          </h1>
          <p class="text-xl text-white/90">
            {getTranslation('blog.subtitle', lang)}
          </p>
        </div>
      </div>
    </section>

    <!-- Blog Content -->
    <section class="py-12">
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          <!-- Advanced Search & Filter -->
          <div class="relative">
            <SearchFilter />
            <SearchSuggestions />
          </div>

          <!-- Search Analytics (Admin only - can be hidden in production) -->
          <div id="search-analytics-section" class="mb-8">
            <SearchAnalytics />
          </div>

          <!-- Posts Grid -->
          <div id="posts-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {sortedPosts.map((post) => (
              <article 
                class="post-card bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow"
                data-tags={post.data.tags?.join(' ') || ''}
                data-category={post.data.category || 'Uncategorized'}
                data-author={post.data.author || 'Unknown'}
                data-reading-time={post.data.readingTime || 0}
                data-pub-date={post.data.pubDate.toISOString()}
              >
                {post.data.heroImage && (
                  <div class="aspect-video overflow-hidden">
                    <img 
                      src={post.data.heroImage} 
                      alt={post.data.title}
                      class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                    />
                  </div>
                )}
                <div class="p-6">
                  <div class="flex items-center gap-2 mb-3">
                    {post.data.tags?.slice(0, 3).map((tag) => (
                      <span class="post-tag px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 text-xs font-medium rounded">
                        {tag}
                      </span>
                    ))}
                  </div>
                  <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3 line-clamp-2">
                    {post.data.title}
                  </h3>
                  <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                    {post.data.description}
                  </p>
                  <div class="flex items-center justify-between">
                    <span class="text-sm text-gray-500 dark:text-gray-400">
                      {formatDate(post.data.pubDate, lang)}
                    </span>
                    <a 
                      href={`/${lang === 'en' ? '' : lang}/blog/${post.slug}`}
                      class="text-primary-600 dark:text-primary-400 font-medium hover:underline"
                    >
                      {getTranslation('blog.readMore', lang)} â†’
                    </a>
                  </div>
                </div>
              </article>
            ))}
          </div>

          <!-- No results message -->
          <div id="no-results" class="hidden text-center py-12">
            <div class="text-gray-500 dark:text-gray-400">
              <svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.47-.881-6.08-2.33"></path>
              </svg>
              <h3 class="text-xl font-semibold mb-2">
                {getTranslation('blog.search.noResults', lang)}
              </h3>
              <p>
                {getTranslation('blog.search.noResults', lang)}
              </p>
            </div>
          </div>

          <!-- Loading indicator -->
          <div id="loading-indicator" class="hidden text-center py-8">
            <div class="inline-flex items-center">
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-primary-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span class="text-gray-600 dark:text-gray-400">
                {getTranslation('blog.search.loading', lang)}
              </span>
            </div>
          </div>
        </div>
      </div>
    </section>

    <Footer currentLang={lang} />
  </div>
</BaseLayout>

<script>
  // Enhanced search and filter functionality with analytics
  class EnhancedBlogSearch {
    constructor() {
      this.posts = [];
      this.filteredPosts = [];
      this.searchAnalytics = window.searchAnalytics;
      this.searchStartTime = 0;
      
      this.init();
    }

    async init() {
      // Get posts data from the DOM
      this.posts = this.getPostsFromDOM();
      this.filteredPosts = [...this.posts];
      
      this.bindEvents();
      this.updateResults();
    }

    getPostsFromDOM() {
      const postCards = document.querySelectorAll('.post-card');
      return Array.from(postCards).map(card => ({
        element: card,
        title: card.querySelector('h3')?.textContent || '',
        description: card.querySelector('p')?.textContent || '',
        tags: card.dataset.tags?.split(' ') || [],
        category: card.dataset.category || 'Uncategorized',
        author: card.dataset.author || 'Unknown',
        readingTime: parseInt(card.dataset.readingTime) || 0,
        pubDate: new Date(card.dataset.pubDate),
        slug: card.querySelector('a')?.href?.split('/').pop() || ''
      }));
    }

    bindEvents() {
      // Search input
      const searchInput = document.getElementById('advanced-search');
      searchInput?.addEventListener('input', (e) => {
        this.startSearch();
        this.performSearch(e.target.value.toLowerCase());
      });

      // Date filter
      const dateFilter = document.getElementById('date-filter');
      dateFilter?.addEventListener('change', (e) => {
        this.startSearch();
        this.applyFilters();
      });

      // Sort by
      const sortBy = document.getElementById('sort-by');
      sortBy?.addEventListener('change', (e) => {
        this.startSearch();
        this.applyFilters();
      });

      // Tag filters
      document.querySelectorAll('.tag-filter-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', () => {
          this.startSearch();
          this.applyFilters();
        });
      });

      // Category filters
      document.querySelectorAll('.category-filter-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', () => {
          this.startSearch();
          this.applyFilters();
        });
      });

      // Author filters
      document.querySelectorAll('.author-filter-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', () => {
          this.startSearch();
          this.applyFilters();
        });
      });

      // Reading time filters
      document.querySelectorAll('.reading-time-filter').forEach(checkbox => {
        checkbox.addEventListener('change', () => {
          this.startSearch();
          this.applyFilters();
        });
      });

      // Action buttons
      document.getElementById('apply-filters')?.addEventListener('click', () => {
        this.startSearch();
        this.applyFilters();
      });

      document.getElementById('clear-filters')?.addEventListener('click', () => {
        this.clearAllFilters();
      });

      document.getElementById('save-search')?.addEventListener('click', () => {
        this.saveSearch();
      });
    }

    startSearch() {
      this.searchStartTime = performance.now();
      this.showLoading();
    }

    performSearch(searchTerm) {
      this.currentSearchTerm = searchTerm;
      this.applyFilters();
    }

    applyFilters() {
      const searchTerm = this.currentSearchTerm || '';
      const dateRange = document.getElementById('date-filter')?.value || 'all';
      const sortBy = document.getElementById('sort-by')?.value || 'date-desc';
      
      // Get selected tags
      const selectedTags = Array.from(document.querySelectorAll('.tag-filter-checkbox:checked'))
        .map(cb => cb.value);
      
      // Get selected categories
      const selectedCategories = Array.from(document.querySelectorAll('.category-filter-checkbox:checked'))
        .map(cb => cb.value);
      
      // Get selected authors
      const selectedAuthors = Array.from(document.querySelectorAll('.author-filter-checkbox:checked'))
        .map(cb => cb.value);
      
      // Get selected reading times
      const selectedReadingTimes = Array.from(document.querySelectorAll('.reading-time-filter:checked'))
        .map(cb => cb.value);

      // Filter posts
      let visibleCount = 0;

      this.posts.forEach(post => {
        const title = post.title.toLowerCase();
        const description = post.description.toLowerCase();
        const tags = post.tags?.join(' ').toLowerCase() || '';
        const author = post.author?.toLowerCase() || '';
        const category = post.category?.toLowerCase() || '';
        
        const matchesSearch = searchTerm === '' || 
          title.includes(searchTerm) || 
          description.includes(searchTerm) ||
          tags.includes(searchTerm) ||
          author.includes(searchTerm);
        
        const matchesDate = dateRange === 'all' || 
          this.matchesDateRange(post.pubDate, dateRange);
        
        const matchesTag = selectedTags.length === 0 || 
          post.tags?.some(tag => selectedTags.includes(tag));

        const matchesCategory = selectedCategories.length === 0 || 
          selectedCategories.includes(post.category);

        const matchesAuthor = selectedAuthors.length === 0 || 
          selectedAuthors.includes(post.author);

        const matchesReadingTime = selectedReadingTimes.length === 0 || 
          this.matchesReadingTime(post.readingTime, selectedReadingTimes);

        if (matchesSearch && matchesDate && matchesTag && matchesCategory && matchesAuthor && matchesReadingTime) {
          post.element.style.display = 'block';
          visibleCount++;
        } else {
          post.element.style.display = 'none';
        }
      });

      // Sort results
      this.sortResults(sortBy);
      
      // Show/hide no results message
      const noResults = document.getElementById('no-results');
      const postsGrid = document.getElementById('posts-grid');
      
      if (visibleCount === 0) {
        noResults?.classList.remove('hidden');
        postsGrid?.classList.add('hidden');
      } else {
        noResults?.classList.add('hidden');
        postsGrid?.classList.remove('hidden');
      }

      // Update results count
      const resultsCount = document.getElementById('results-count');
      const totalPosts = document.getElementById('total-posts');
      
      if (resultsCount) resultsCount.textContent = visibleCount;
      if (totalPosts) totalPosts.textContent = this.posts.length;

      this.hideLoading();
      
      // Record analytics
      this.recordSearchAnalytics();
    }

    matchesDateRange(postDate, dateRange) {
      const now = new Date();
      const postDateObj = new Date(postDate);
      
      switch (dateRange) {
        case 'today':
          const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
          return postDateObj >= today;
        case 'week':
          const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
          return postDateObj >= weekAgo;
        case 'month':
          const monthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());
          return postDateObj >= monthAgo;
        case 'quarter':
          const quarterAgo = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
          return postDateObj >= quarterAgo;
        case 'year':
          const yearAgo = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
          return postDateObj >= yearAgo;
        default:
          return true;
      }
    }

    matchesReadingTime(readingTime, ranges) {
      return ranges.some(range => {
        const [min, max] = range.split('-').map(Number);
        if (max) {
          return readingTime >= min && readingTime <= max;
        } else {
          return readingTime >= min;
        }
      });
    }

    sortResults(sortBy) {
      const visiblePosts = this.posts.filter(post => post.element.style.display !== 'none');
      
      visiblePosts.sort((a, b) => {
        switch (sortBy) {
          case 'date-desc':
            return new Date(b.pubDate) - new Date(a.pubDate);
          case 'date-asc':
            return new Date(a.pubDate) - new Date(b.pubDate);
          case 'title-asc':
            return a.title.localeCompare(b.title);
          case 'title-desc':
            return b.title.localeCompare(a.title);
          case 'reading-time':
            return (b.readingTime || 0) - (a.readingTime || 0);
          case 'author':
            return (a.author || '').localeCompare(b.author || '');
          case 'popularity':
            return (b.views || 0) - (a.views || 0);
          default:
            return 0;
        }
      });

      // Reorder DOM elements
      const postsGrid = document.getElementById('posts-grid');
      if (postsGrid) {
        visiblePosts.forEach(post => {
          postsGrid.appendChild(post.element);
        });
      }
    }

    showLoading() {
      const loadingIndicator = document.getElementById('loading-indicator');
      if (loadingIndicator) {
        loadingIndicator.classList.remove('hidden');
      }
    }

    hideLoading() {
      const loadingIndicator = document.getElementById('loading-indicator');
      if (loadingIndicator) {
        loadingIndicator.classList.add('hidden');
      }
    }

    clearAllFilters() {
      // Reset all filters
      const searchInput = document.getElementById('advanced-search');
      if (searchInput) searchInput.value = '';

      const dateFilter = document.getElementById('date-filter');
      if (dateFilter) dateFilter.value = 'all';

      const sortBy = document.getElementById('sort-by');
      if (sortBy) sortBy.value = 'date-desc';

      // Uncheck all checkboxes
      document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
        cb.checked = false;
      });

      // Reset current search
      this.currentSearchTerm = '';
      
      // Apply filters
      this.applyFilters();
    }

    saveSearch() {
      const searchName = prompt('Enter a name for this search:');
      if (searchName) {
        const savedSearches = JSON.parse(localStorage.getItem('savedSearches') || '[]');
        savedSearches.push({
          name: searchName,
          searchTerm: this.currentSearchTerm,
          filters: this.getCurrentFilters(),
          timestamp: new Date().toISOString()
        });
        
        localStorage.setItem('savedSearches', JSON.stringify(savedSearches));
        alert('Search saved successfully!');
      }
    }

    getCurrentFilters() {
      return {
        dateRange: document.getElementById('date-filter')?.value || 'all',
        sortBy: document.getElementById('sort-by')?.value || 'date-desc',
        tags: Array.from(document.querySelectorAll('.tag-filter-checkbox:checked')).map(cb => cb.value),
        categories: Array.from(document.querySelectorAll('.category-filter-checkbox:checked')).map(cb => cb.value),
        authors: Array.from(document.querySelectorAll('.author-filter-checkbox:checked')).map(cb => cb.value),
        readingTime: Array.from(document.querySelectorAll('.reading-time-filter:checked')).map(cb => cb.value)
      };
    }

    recordSearchAnalytics() {
      if (this.searchAnalytics) {
        const searchTime = performance.now() - this.searchStartTime;
        this.searchAnalytics.recordSearch(
          this.currentSearchTerm || '',
          this.getCurrentFilters(),
          this.filteredPosts.length,
          Math.round(searchTime)
        );
      }
    }
  }

  // Initialize enhanced search
  new EnhancedBlogSearch();
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style> 