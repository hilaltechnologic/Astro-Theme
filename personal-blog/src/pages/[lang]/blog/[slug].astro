---
import { getCollection } from 'astro:content';
import BlogPost from '../../../layouts/BlogPost.astro';
import { getLanguageFromUrl, supportedLanguages, type Language } from '../../../i18n/config';
import { getTranslation } from '../../../i18n/index';

// Get language from URL
const lang = getLanguageFromUrl(Astro.url);

// Validate language
if (!supportedLanguages.includes(lang)) {
  return Astro.redirect('/blog');
}

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  
  // Generate paths for each language and post
  const paths = [];
  
  for (const lang of ['en', 'id', 'es']) {
    for (const post of posts) {
      paths.push({
        params: { 
          lang: lang === 'en' ? undefined : lang,
          slug: post.slug 
        },
        props: { post, lang }
      });
    }
  }
  
  return paths;
}

const { post, lang: postLang } = Astro.props;
const { Content } = await post.render();

// Format dates based on language
const formatDate = (date: Date, language: Language) => {
  return new Intl.DateTimeFormat(language === 'en' ? 'en-US' : language === 'id' ? 'id-ID' : 'en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};

// Calculate reading time
const readingTime = Math.ceil(post.data.readingTime || 5);
---

<BlogPost 
  frontmatter={post.data} 
  rawContent={post.body}
  lang={postLang}
  formatDate={formatDate}
  readingTime={readingTime}
>
  <Content />
</BlogPost> 