---
// Reading progress bar component
---

<div id="reading-progress" class="fixed top-0 left-0 w-full h-1 bg-gray-200 dark:bg-gray-700 z-50">
  <div 
    id="reading-progress-bar" 
    class="h-full bg-gradient-to-r from-primary-500 to-primary-600 transition-all duration-300 ease-out"
    style="width: 0%"
  ></div>
</div>

<script>
  class ReadingProgress {
    constructor() {
      this.progressBar = document.getElementById('reading-progress-bar');
      this.progressContainer = document.getElementById('reading-progress');
      this.article = document.querySelector('article') || document.querySelector('main');
      
      if (!this.progressBar || !this.article) return;
      
      this.init();
    }
    
    init() {
      this.calculateProgress();
      this.setupEventListeners();
    }
    
    calculateProgress() {
      const articleRect = this.article.getBoundingClientRect();
      const articleHeight = this.article.offsetHeight;
      const windowHeight = window.innerHeight;
      
      // Calculate how much of the article has been scrolled past
      const scrolled = window.pageYOffset;
      const articleTop = this.article.offsetTop;
      const articleBottom = articleTop + articleHeight;
      
      let progress = 0;
      
      if (scrolled >= articleTop) {
        const visibleHeight = Math.min(windowHeight, articleBottom - scrolled);
        const totalVisible = Math.min(articleHeight, windowHeight);
        progress = Math.min(100, (visibleHeight / totalVisible) * 100);
      }
      
      this.updateProgress(progress);
    }
    
    updateProgress(progress) {
      if (this.progressBar) {
        this.progressBar.style.width = `${progress}%`;
        
        // Add visual feedback when near completion
        if (progress > 90) {
          this.progressBar.classList.add('bg-green-500');
        } else {
          this.progressBar.classList.remove('bg-green-500');
        }
      }
    }
    
    setupEventListeners() {
      let ticking = false;
      
      const updateProgress = () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.calculateProgress();
            ticking = false;
          });
          ticking = true;
        }
      };
      
      window.addEventListener('scroll', updateProgress, { passive: true });
      window.addEventListener('resize', updateProgress, { passive: true });
      
      // Update on page load
      window.addEventListener('load', () => {
        this.calculateProgress();
      });
    }
  }
  
  // Initialize reading progress when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ReadingProgress();
  });
</script>

<style>
  #reading-progress {
    backdrop-filter: blur(8px);
    background-color: rgba(255, 255, 255, 0.9);
  }
  
  .dark #reading-progress {
    background-color: rgba(17, 24, 39, 0.9);
  }
  
  #reading-progress-bar {
    box-shadow: 0 0 10px rgba(14, 165, 233, 0.3);
  }
</style> 