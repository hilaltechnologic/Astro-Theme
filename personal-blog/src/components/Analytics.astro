---
export interface Props {
  gaId?: string;
  gtmId?: string;
  enableAnalytics?: boolean;
  privacyMode?: boolean;
}

const { 
  gaId = 'G-XXXXXXXXXX', 
  gtmId = 'GTM-XXXXXXXX',
  enableAnalytics = true,
  privacyMode = true 
} = Astro.props;
---

{enableAnalytics && (
  <>
    <!-- Google Analytics 4 -->
    {gaId && gaId !== 'G-XXXXXXXXXX' && (
      <>
        <script async src={`https://www.googletagmanager.com/gtag/js?id=${gaId}`}></script>
        <script>
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', '{gaId}', {
            page_title: document.title,
            page_location: window.location.href,
            send_page_view: true,
            anonymize_ip: {privacyMode},
            allow_google_signals: !{privacyMode},
            allow_ad_personalization_signals: !{privacyMode}
          });
        </script>
      </>
    )}

    <!-- Google Tag Manager -->
    {gtmId && gtmId !== 'GTM-XXXXXXXX' && (
      <>
        <script>
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','{gtmId}');
        </script>
        <noscript>
          <iframe src={`https://www.googletagmanager.com/ns.html?id=${gtmId}`}
            height="0" width="0" style="display:none;visibility:hidden"></iframe>
        </noscript>
      </>
    )}

    <!-- Privacy-Friendly Analytics -->
    <script>
      class PrivacyAnalytics {
        constructor() {
          this.consent = this.getConsent();
          this.events = [];
          this.init();
        }
        
        init() {
          if (this.consent) {
            this.trackPageView();
            this.setupEventListeners();
            this.trackPerformance();
          }
        }
        
        getConsent() {
          return localStorage.getItem('analytics_consent') === 'true' || !{privacyMode};
        }
        
        setConsent(consent) {
          localStorage.setItem('analytics_consent', consent);
          this.consent = consent;
          
          if (consent) {
            this.init();
          }
        }
        
        trackPageView() {
          const pageData = {
            url: window.location.href,
            title: document.title,
            referrer: document.referrer,
            timestamp: Date.now(),
            userAgent: navigator.userAgent,
            screenSize: `${screen.width}x${screen.height}`,
            viewport: `${window.innerWidth}x${window.innerHeight}`
          };
          
          this.sendEvent('page_view', pageData);
        }
        
        trackEvent(eventName, eventData = {}) {
          if (!this.consent) return;
          
          const event = {
            name: eventName,
            data: eventData,
            timestamp: Date.now(),
            url: window.location.href
          };
          
          this.events.push(event);
          this.sendEvent(eventName, eventData);
        }
        
        setupEventListeners() {
          // Track clicks on important elements
          document.addEventListener('click', (e) => {
            const target = e.target.closest('a, button, [data-track]');
            if (target) {
              this.trackEvent('click', {
                element: target.tagName.toLowerCase(),
                text: target.textContent?.trim().substring(0, 50),
                href: target.href,
                dataset: target.dataset
              });
            }
          });
          
          // Track form submissions
          document.addEventListener('submit', (e) => {
            this.trackEvent('form_submit', {
              form: e.target.action,
              method: e.target.method
            });
          });
          
          // Track scroll depth
          let maxScroll = 0;
          document.addEventListener('scroll', () => {
            const scrollPercent = Math.round(
              (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100
            );
            
            if (scrollPercent > maxScroll) {
              maxScroll = scrollPercent;
              
              if (maxScroll % 25 === 0) { // Track every 25%
                this.trackEvent('scroll_depth', {
                  depth: maxScroll
                });
              }
            }
          });
          
          // Track time on page
          let startTime = Date.now();
          window.addEventListener('beforeunload', () => {
            const timeOnPage = Math.round((Date.now() - startTime) / 1000);
            this.trackEvent('time_on_page', {
              seconds: timeOnPage
            });
          });
        }
        
        trackPerformance() {
          // Track Core Web Vitals
          if ('PerformanceObserver' in window) {
            const observer = new PerformanceObserver((list) => {
              for (const entry of list.getEntries()) {
                if (entry.entryType === 'largest-contentful-paint') {
                  this.trackEvent('performance_lcp', {
                    value: Math.round(entry.startTime)
                  });
                }
                if (entry.entryType === 'first-input') {
                  this.trackEvent('performance_fid', {
                    value: Math.round(entry.processingStart - entry.startTime)
                  });
                }
                if (entry.entryType === 'layout-shift') {
                  this.trackEvent('performance_cls', {
                    value: entry.value
                  });
                }
              }
            });
            
            observer.observe({ 
              entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] 
            });
          }
        }
        
        sendEvent(eventName, eventData) {
          // Send to Google Analytics if available
          if (typeof gtag !== 'undefined') {
            gtag('event', eventName, eventData);
          }
          
          // Send to custom analytics endpoint
          this.sendToCustomAnalytics(eventName, eventData);
        }
        
        async sendToCustomAnalytics(eventName, eventData) {
          try {
            await fetch('/api/analytics', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                event: eventName,
                data: eventData,
                timestamp: Date.now(),
                session: this.getSessionId()
              })
            });
          } catch (error) {
            console.error('Analytics error:', error);
          }
        }
        
        getSessionId() {
          let sessionId = localStorage.getItem('analytics_session');
          if (!sessionId) {
            sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('analytics_session', sessionId);
          }
          return sessionId;
        }
        
        getEvents() {
          return this.events;
        }
        
        clearEvents() {
          this.events = [];
        }
      }
      
      // Initialize analytics
      window.analytics = new PrivacyAnalytics();
    </script>
  </>
)}

<!-- Privacy Consent Banner -->
{privacyMode && (
  <div id="privacy-banner" class="fixed bottom-0 left-0 right-0 bg-gray-900 text-white p-4 z-50 transform translate-y-full transition-transform duration-300">
    <div class="max-w-7xl mx-auto flex flex-col sm:flex-row items-center justify-between">
      <div class="mb-4 sm:mb-0">
        <h3 class="text-lg font-semibold mb-2">Privacy & Analytics</h3>
        <p class="text-sm text-gray-300">
          We use analytics to improve your experience. Your data is anonymized and secure.
        </p>
      </div>
      <div class="flex space-x-4">
        <button 
          onclick="acceptAnalytics()"
          class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
        >
          Accept
        </button>
        <button 
          onclick="declineAnalytics()"
          class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
        >
          Decline
        </button>
      </div>
    </div>
  </div>
)}

<script>
  // Privacy consent functions
  function acceptAnalytics() {
    if (window.analytics) {
      window.analytics.setConsent(true);
    }
    hidePrivacyBanner();
  }
  
  function declineAnalytics() {
    if (window.analytics) {
      window.analytics.setConsent(false);
    }
    hidePrivacyBanner();
  }
  
  function hidePrivacyBanner() {
    const banner = document.getElementById('privacy-banner');
    if (banner) {
      banner.classList.add('translate-y-full');
      setTimeout(() => {
        banner.style.display = 'none';
      }, 300);
    }
  }
  
  // Show privacy banner if consent not given
  document.addEventListener('DOMContentLoaded', () => {
    const consent = localStorage.getItem('analytics_consent');
    if (consent === null && {privacyMode}) {
      setTimeout(() => {
        const banner = document.getElementById('privacy-banner');
        if (banner) {
          banner.classList.remove('translate-y-full');
        }
      }, 2000);
    }
  });
</script>

<style>
  #privacy-banner {
    box-shadow: 0 -4px 6px -1px rgba(0, 0, 0, 0.1);
  }
</style> 