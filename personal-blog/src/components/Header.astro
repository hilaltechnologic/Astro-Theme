---
import { getLanguageFromUrl, type Language } from '../i18n/config';
import { getTranslation } from '../i18n/index';
import LanguageSelector from './LanguageSelector.astro';

interface Props {
  currentLang?: Language;
}

const { currentLang } = Astro.props;
const lang = currentLang || getLanguageFromUrl(Astro.url);
---

<header class="bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <div class="flex items-center">
        <a href={`/${lang === 'en' ? '' : lang}`} class="flex items-center space-x-2">
          <svg class="w-8 h-8 text-primary-600" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
          </svg>
          <span class="text-xl font-bold text-gray-900 dark:text-white">
            {getTranslation('nav.home', lang)}
          </span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center space-x-8">
        <a 
          href={`/${lang === 'en' ? '' : lang}`}
          class="text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 font-medium transition-colors"
        >
          {getTranslation('nav.home', lang)}
        </a>
        <a 
          href={`/${lang === 'en' ? '' : lang}/blog`}
          class="text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 font-medium transition-colors"
        >
          {getTranslation('nav.blog', lang)}
        </a>
        <a 
          href={`/${lang === 'en' ? '' : lang}/about`}
          class="text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 font-medium transition-colors"
        >
          {getTranslation('nav.about', lang)}
        </a>
        <a 
          href={`/${lang === 'en' ? '' : lang}/contact`}
          class="text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 font-medium transition-colors"
        >
          {getTranslation('nav.contact', lang)}
        </a>
      </nav>

      <!-- Right side controls -->
      <div class="flex items-center space-x-4">
        <!-- Language Selector -->
        <LanguageSelector currentLang={lang} url={Astro.url} />

        <!-- Dark mode toggle -->
        <button
          id="dark-mode-toggle"
          class="p-2 text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
          aria-label="Toggle dark mode"
        >
          <svg id="sun-icon" class="w-5 h-5 hidden dark:block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
          </svg>
          <svg id="moon-icon" class="w-5 h-5 block dark:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
          </svg>
        </button>

        <!-- Mobile menu button -->
        <button
          id="mobile-menu-toggle"
          class="md:hidden p-2 text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
          aria-label="Toggle mobile menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="md:hidden hidden">
      <div class="px-2 pt-2 pb-3 space-y-1 border-t border-gray-200 dark:border-gray-700">
        <a 
          href={`/${lang === 'en' ? '' : lang}`}
          class="block px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
        >
          {getTranslation('nav.home', lang)}
        </a>
        <a 
          href={`/${lang === 'en' ? '' : lang}/blog`}
          class="block px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
        >
          {getTranslation('nav.blog', lang)}
        </a>
        <a 
          href={`/${lang === 'en' ? '' : lang}/about`}
          class="block px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
        >
          {getTranslation('nav.about', lang)}
        </a>
        <a 
          href={`/${lang === 'en' ? '' : lang}/contact`}
          class="block px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
        >
          {getTranslation('nav.contact', lang)}
        </a>
      </div>
    </div>
  </div>
</header>

<script>
  // Dark mode toggle functionality
  function initDarkMode() {
    const toggle = document.getElementById('dark-mode-toggle');
    const html = document.documentElement;
    
    // Check for saved theme preference or default to light mode
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
      html.classList.add('dark');
    }
    
    toggle?.addEventListener('click', () => {
      html.classList.toggle('dark');
      const isDark = html.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
  }

  // Mobile menu toggle functionality
  function initMobileMenu() {
    const toggle = document.getElementById('mobile-menu-toggle');
    const menu = document.getElementById('mobile-menu');
    
    toggle?.addEventListener('click', () => {
      menu?.classList.toggle('hidden');
    });
    
    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!toggle?.contains(e.target as Node) && !menu?.contains(e.target as Node)) {
        menu?.classList.add('hidden');
      }
    });
  }

  // Initialize functionality
  initDarkMode();
  initMobileMenu();
</script> 