---
// Accessibility component for enhanced user experience
---

<!-- Skip to main content link -->
<a 
  href="#main-content" 
  class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary-600 text-white px-4 py-2 rounded-lg z-50"
>
  Skip to main content
</a>

<!-- Focus indicator styles -->
<style>
  /* Custom focus indicators */
  *:focus {
    outline: 2px solid #0ea5e9;
    outline-offset: 2px;
  }
  
  /* Remove focus outline for mouse users */
  *:focus:not(:focus-visible) {
    outline: none;
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    *:focus {
      outline: 3px solid #000000;
      outline-offset: 3px;
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
  
  /* Screen reader only content */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  /* Focus visible utility */
  .focus-visible {
    outline: 2px solid #0ea5e9;
    outline-offset: 2px;
  }
</style>

<script>
  class AccessibilityManager {
    constructor() {
      this.init();
    }
    
    init() {
      this.setupKeyboardNavigation();
      this.setupARIALabels();
      this.setupLiveRegions();
      this.setupColorContrast();
      this.setupReducedMotion();
      this.setupFocusManagement();
    }
    
    setupKeyboardNavigation() {
      // Handle keyboard navigation for custom components
      document.addEventListener('keydown', (e) => {
        // Escape key to close modals/dropdowns
        if (e.key === 'Escape') {
          this.closeAllModals();
        }
        
        // Tab key management
        if (e.key === 'Tab') {
          this.handleTabNavigation(e);
        }
        
        // Arrow keys for custom components
        if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
          this.handleArrowNavigation(e);
        }
      });
    }
    
    setupARIALabels() {
      // Add missing ARIA labels
      const images = document.querySelectorAll('img:not([alt])');
      images.forEach(img => {
        if (!img.alt) {
          img.alt = 'Image';
        }
      });
      
      // Add ARIA labels to interactive elements
      const buttons = document.querySelectorAll('button:not([aria-label])');
      buttons.forEach(button => {
        if (!button.textContent.trim()) {
          button.setAttribute('aria-label', 'Button');
        }
      });
      
      // Add ARIA labels to links
      const links = document.querySelectorAll('a:not([aria-label])');
      links.forEach(link => {
        if (!link.textContent.trim()) {
          link.setAttribute('aria-label', 'Link');
        }
      });
    }
    
    setupLiveRegions() {
      // Create live regions for dynamic content
      const liveRegion = document.createElement('div');
      liveRegion.setAttribute('aria-live', 'polite');
      liveRegion.setAttribute('aria-atomic', 'true');
      liveRegion.className = 'sr-only';
      document.body.appendChild(liveRegion);
      
      // Store reference for use in other functions
      this.liveRegion = liveRegion;
    }
    
    setupColorContrast() {
      // Check color contrast ratios
      const checkContrast = () => {
        const elements = document.querySelectorAll('*');
        elements.forEach(element => {
          const style = window.getComputedStyle(element);
          const backgroundColor = style.backgroundColor;
          const color = style.color;
          
          // Basic contrast check (simplified)
          if (backgroundColor && color) {
            // This is a simplified check - in production, use a proper contrast library
            console.log('Contrast check for:', element.tagName);
          }
        });
      };
      
      // Run contrast check on load
      window.addEventListener('load', checkContrast);
    }
    
    setupReducedMotion() {
      // Respect reduced motion preferences
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
      
      if (prefersReducedMotion.matches) {
        document.documentElement.classList.add('reduced-motion');
      }
      
      prefersReducedMotion.addEventListener('change', (e) => {
        if (e.matches) {
          document.documentElement.classList.add('reduced-motion');
        } else {
          document.documentElement.classList.remove('reduced-motion');
        }
      });
    }
    
    setupFocusManagement() {
      // Track focus for better UX
      let previousFocus = null;
      
      document.addEventListener('focusin', (e) => {
        previousFocus = e.target;
      });
      
      // Restore focus when modals close
      this.restoreFocus = () => {
        if (previousFocus && previousFocus.focus) {
          previousFocus.focus();
        }
      };
    }
    
    handleTabNavigation(e) {
      // Trap focus in modals
      const modal = document.querySelector('[role="dialog"]');
      if (modal && modal.contains(e.target)) {
        const focusableElements = modal.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        if (e.shiftKey && e.target === firstElement) {
          e.preventDefault();
          lastElement.focus();
        } else if (!e.shiftKey && e.target === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    }
    
    handleArrowNavigation(e) {
      // Handle arrow keys for custom components like dropdowns
      const dropdown = e.target.closest('[role="listbox"]');
      if (dropdown) {
        const items = dropdown.querySelectorAll('[role="option"]');
        const currentIndex = Array.from(items).findIndex(item => 
          item.getAttribute('aria-selected') === 'true'
        );
        
        let newIndex = currentIndex;
        
        if (e.key === 'ArrowDown') {
          newIndex = Math.min(currentIndex + 1, items.length - 1);
        } else if (e.key === 'ArrowUp') {
          newIndex = Math.max(currentIndex - 1, 0);
        }
        
        if (newIndex !== currentIndex) {
          items[currentIndex]?.setAttribute('aria-selected', 'false');
          items[newIndex]?.setAttribute('aria-selected', 'true');
          items[newIndex]?.focus();
        }
      }
    }
    
    closeAllModals() {
      const modals = document.querySelectorAll('[role="dialog"]');
      modals.forEach(modal => {
        const closeButton = modal.querySelector('[aria-label*="close"], [aria-label*="Close"]');
        if (closeButton) {
          closeButton.click();
        }
      });
    }
    
    announceToScreenReader(message) {
      if (this.liveRegion) {
        this.liveRegion.textContent = message;
        // Clear the message after a short delay
        setTimeout(() => {
          this.liveRegion.textContent = '';
        }, 1000);
      }
    }
    
    // Utility functions
    isVisible(element) {
      const rect = element.getBoundingClientRect();
      return rect.width > 0 && rect.height > 0;
    }
    
    getFocusableElements(container = document) {
      return container.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
    }
    
    setFocusTrap(container) {
      const focusableElements = this.getFocusableElements(container);
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];
      
      container.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          if (e.shiftKey && e.target === firstElement) {
            e.preventDefault();
            lastElement.focus();
          } else if (!e.shiftKey && e.target === lastElement) {
            e.preventDefault();
            firstElement.focus();
          }
        }
      });
    }
  }
  
  // Initialize accessibility features
  document.addEventListener('DOMContentLoaded', () => {
    window.accessibility = new AccessibilityManager();
  });
</script>

<!-- Accessibility testing tools (development only) -->
{import.meta.env.DEV && (
  <div id="accessibility-tools" class="fixed top-4 left-4 bg-gray-900 text-white p-4 rounded-lg z-50 max-w-xs">
    <h3 class="font-semibold mb-2">Accessibility Tools</h3>
    <div class="space-y-2 text-sm">
      <button 
        onclick="testAccessibility()"
        class="block w-full bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-xs"
      >
        Test Accessibility
      </button>
      <button 
        onclick="toggleFocusIndicator()"
        class="block w-full bg-green-600 hover:bg-green-700 px-3 py-1 rounded text-xs"
      >
        Toggle Focus Indicator
      </button>
      <button 
        onclick="announceTest()"
        class="block w-full bg-purple-600 hover:bg-purple-700 px-3 py-1 rounded text-xs"
      >
        Test Screen Reader
      </button>
    </div>
    <button 
      onclick="document.getElementById('accessibility-tools').style.display='none'"
      class="mt-2 text-xs text-gray-400 hover:text-white"
    >
      Close
    </button>
  </div>
)}

<script>
  // Accessibility testing functions (development only)
  if (import.meta.env.DEV) {
    window.testAccessibility = function() {
      const issues = [];
      
      // Check for missing alt attributes
      const images = document.querySelectorAll('img');
      images.forEach(img => {
        if (!img.alt) {
          issues.push(`Image missing alt attribute: ${img.src}`);
        }
      });
      
      // Check for missing ARIA labels
      const interactiveElements = document.querySelectorAll('button, a, input, select, textarea');
      interactiveElements.forEach(element => {
        if (!element.getAttribute('aria-label') && !element.textContent.trim()) {
          issues.push(`Interactive element missing label: ${element.tagName}`);
        }
      });
      
      // Check color contrast (simplified)
      const textElements = document.querySelectorAll('p, h1, h2, h3, h4, h5, h6, span, div');
      textElements.forEach(element => {
        const style = window.getComputedStyle(element);
        if (style.color && style.backgroundColor) {
          // Basic contrast check
          console.log('Contrast check for:', element.textContent.substring(0, 20));
        }
      });
      
      console.log('Accessibility Issues:', issues);
      alert(`Found ${issues.length} accessibility issues. Check console for details.`);
    };
    
    window.toggleFocusIndicator = function() {
      document.body.classList.toggle('show-focus-indicators');
    };
    
    window.announceTest = function() {
      if (window.accessibility) {
        window.accessibility.announceToScreenReader('This is a test announcement for screen readers.');
      }
    };
  }
</script>

<style>
  /* Focus indicator styles for testing */
  .show-focus-indicators *:focus {
    outline: 3px solid red !important;
    outline-offset: 3px !important;
  }
  
  /* Reduced motion styles */
  .reduced-motion * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
</style> 