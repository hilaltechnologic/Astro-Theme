---
export interface Props {
  url: string;
  title?: string;
  aspectRatio?: '16:9' | '4:3' | '1:1';
  autoplay?: boolean;
  controls?: boolean;
  loop?: boolean;
  muted?: boolean;
}

const { url, title, aspectRatio = '16:9', autoplay = false, controls = true, loop = false, muted = false } = Astro.props;

// Parse video URL to determine type and extract ID
function parseVideoUrl(url: string) {
  // YouTube patterns
  const youtubePatterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([a-zA-Z0-9_-]{11})/,
    /youtube\.com\/watch\?.*v=([a-zA-Z0-9_-]{11})/
  ];
  
  // Vimeo patterns
  const vimeoPatterns = [
    /vimeo\.com\/(\d+)/,
    /player\.vimeo\.com\/video\/(\d+)/
  ];
  
  // Check for YouTube
  for (const pattern of youtubePatterns) {
    const match = url.match(pattern);
    if (match) {
      return { type: 'youtube', id: match[1] };
    }
  }
  
  // Check for Vimeo
  for (const pattern of vimeoPatterns) {
    const match = url.match(pattern);
    if (match) {
      return { type: 'vimeo', id: match[1] };
    }
  }
  
  // Check for custom video (mp4, webm, etc.)
  const videoExtensions = /\.(mp4|webm|ogg|mov|avi|wmv|flv|mkv)$/i;
  if (videoExtensions.test(url)) {
    return { type: 'custom', id: null };
  }
  
  return { type: 'unknown', id: null };
}

const videoInfo = parseVideoUrl(url);
---

<div class="video-embed-container">
  {title && (
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
      {title}
    </h3>
  )}
  
  <div class={`video-wrapper aspect-ratio-${aspectRatio.replace(':', '-')} relative bg-gray-900 rounded-lg overflow-hidden`}>
    {videoInfo.type === 'youtube' && (
      <iframe
        src={`https://www.youtube.com/embed/${videoInfo.id}?autoplay=${autoplay ? 1 : 0}&controls=${controls ? 1 : 0}&loop=${loop ? 1 : 0}&mute=${muted ? 1 : 0}&rel=0`}
        title={title || 'YouTube video'}
        class="absolute inset-0 w-full h-full"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen
      ></iframe>
    )}
    
    {videoInfo.type === 'vimeo' && (
      <iframe
        src={`https://player.vimeo.com/video/${videoInfo.id}?autoplay=${autoplay ? 1 : 0}&controls=${controls ? 1 : 0}&loop=${loop ? 1 : 0}&muted=${muted ? 1 : 0}&title=0&byline=0&portrait=0`}
        title={title || 'Vimeo video'}
        class="absolute inset-0 w-full h-full"
        frameborder="0"
        allow="autoplay; fullscreen; picture-in-picture"
        allowfullscreen
      ></iframe>
    )}
    
    {videoInfo.type === 'custom' && (
      <video
        src={url}
        class="absolute inset-0 w-full h-full"
        controls={controls}
        autoplay={autoplay}
        loop={loop}
        muted={muted}
        preload="metadata"
      >
        <track kind="captions" src="" label="English" />
        Your browser does not support the video tag.
      </video>
    )}
    
    {videoInfo.type === 'unknown' && (
      <div class="absolute inset-0 flex items-center justify-center bg-gray-800 text-white">
        <div class="text-center">
          <svg class="w-16 h-16 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p class="text-lg font-semibold">Unsupported Video Format</p>
          <p class="text-sm text-gray-400 mt-2">This video platform is not supported.</p>
          <a href={url} target="_blank" rel="noopener noreferrer" class="inline-block mt-4 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors">
            Watch on Original Site
          </a>
        </div>
      </div>
    )}
  </div>
</div>

<script>
  // Lazy load videos for better performance
  class VideoLazyLoader {
    constructor() {
      this.videos = document.querySelectorAll('.video-wrapper iframe, .video-wrapper video');
      this.init();
    }
    
    init() {
      if ('IntersectionObserver' in window) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const video = entry.target;
              if (video.tagName === 'IFRAME') {
                video.src = video.dataset.src;
              } else if (video.tagName === 'VIDEO') {
                video.load();
              }
              observer.unobserve(video);
            }
          });
        }, { rootMargin: '50px' });
        
        this.videos.forEach(video => {
          if (video.tagName === 'IFRAME') {
            video.dataset.src = video.src;
            video.src = '';
          }
          observer.observe(video);
        });
      }
    }
  }
  
  // Initialize lazy loading when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new VideoLazyLoader();
  });
</script>

<style>
  .video-embed-container {
    margin: 2rem 0;
  }
  
  .video-wrapper {
    position: relative;
    width: 100%;
  }
  
  .aspect-ratio-16-9 {
    aspect-ratio: 16/9;
  }
  
  .aspect-ratio-4-3 {
    aspect-ratio: 4/3;
  }
  
  .aspect-ratio-1-1 {
    aspect-ratio: 1/1;
  }
  
  .video-wrapper iframe,
  .video-wrapper video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .video-wrapper {
      margin: 0 -1rem;
      border-radius: 0;
    }
  }
  
  /* Loading state */
  .video-wrapper::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40px;
    height: 40px;
    border: 3px solid #f3f4f6;
    border-top: 3px solid #0ea5e9;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    z-index: 1;
  }
  
  .video-wrapper iframe[src],
  .video-wrapper video[src] {
    z-index: 2;
  }
  
  .video-wrapper iframe[src] + .video-wrapper::before,
  .video-wrapper video[src] + .video-wrapper::before {
    display: none;
  }
  
  @keyframes spin {
    0% { transform: translate(-50%, -50%) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotate(360deg); }
  }
</style> 