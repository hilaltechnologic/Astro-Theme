---
// Search component with full-text search
---

<div class="search-container relative">
  <div class="relative">
    <input
      type="text"
      id="search-input"
      placeholder="Search articles..."
      class="w-full px-4 py-3 pl-12 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
    />
    <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
  </div>
  
  <!-- Search Results -->
  <div id="search-results" class="absolute top-full left-0 right-0 mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 hidden">
    <div id="search-results-content" class="max-h-96 overflow-y-auto">
      <!-- Results will be populated here -->
    </div>
  </div>
</div>

<script>
  class SearchManager {
    constructor() {
      this.searchInput = document.getElementById('search-input');
      this.searchResults = document.getElementById('search-results');
      this.searchResultsContent = document.getElementById('search-results-content');
      this.posts = [];
      this.searchIndex = null;
      
      this.init();
    }
    
    async init() {
      await this.loadPosts();
      this.buildSearchIndex();
      this.setupEventListeners();
    }
    
    async loadPosts() {
      try {
        // In a real implementation, you'd fetch this from your API
        // For now, we'll use a placeholder
        this.posts = [
          {
            title: "Getting Started with Astro",
            description: "Learn how to build fast, modern websites with Astro",
            url: "/blog/getting-started-with-astro",
            tags: ["astro", "web-development", "tutorial"],
            content: "Astro is a modern web framework that's gaining popularity..."
          },
          {
            title: "Welcome to My Personal Blog",
            description: "A brief introduction to my blog and what you can expect",
            url: "/blog/first-post",
            tags: ["personal", "introduction"],
            content: "Hello and welcome to my personal blog! I'm excited to share..."
          }
        ];
      } catch (error) {
        console.error('Error loading posts:', error);
      }
    }
    
    buildSearchIndex() {
      // Simple search index - in production, you might use a library like Fuse.js
      this.searchIndex = this.posts.map(post => ({
        ...post,
        searchText: `${post.title} ${post.description} ${post.content} ${post.tags.join(' ')}`.toLowerCase()
      }));
    }
    
    setupEventListeners() {
      this.searchInput.addEventListener('input', (e) => {
        this.handleSearch(e.target.value);
      });
      
      this.searchInput.addEventListener('focus', () => {
        this.showResults();
      });
      
      document.addEventListener('click', (e) => {
        if (!this.searchInput.contains(e.target) && !this.searchResults.contains(e.target)) {
          this.hideResults();
        }
      });
    }
    
    handleSearch(query) {
      if (!query.trim()) {
        this.hideResults();
        return;
      }
      
      const results = this.searchIndex.filter(post => 
        post.searchText.includes(query.toLowerCase())
      );
      
      this.displayResults(results, query);
    }
    
    displayResults(results, query) {
      if (results.length === 0) {
        this.searchResultsContent.innerHTML = `
          <div class="p-4 text-gray-500 dark:text-gray-400 text-center">
            No results found for "${query}"
          </div>
        `;
      } else {
        this.searchResultsContent.innerHTML = results.map(post => `
          <a href="${post.url}" class="block p-4 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border-b border-gray-100 dark:border-gray-600 last:border-b-0">
            <h3 class="font-semibold text-gray-900 dark:text-white mb-1">
              ${this.highlightText(post.title, query)}
            </h3>
            <p class="text-sm text-gray-600 dark:text-gray-300 mb-2">
              ${this.highlightText(post.description, query)}
            </p>
            <div class="flex items-center text-xs text-gray-500 dark:text-gray-400">
              ${post.tags.map(tag => `
                <span class="bg-gray-100 dark:bg-gray-600 px-2 py-1 rounded mr-2">${tag}</span>
              `).join('')}
            </div>
          </a>
        `).join('');
      }
      
      this.showResults();
    }
    
    highlightText(text, query) {
      if (!query) return text;
      const regex = new RegExp(`(${query})`, 'gi');
      return text.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-800">$1</mark>');
    }
    
    showResults() {
      this.searchResults.classList.remove('hidden');
    }
    
    hideResults() {
      this.searchResults.classList.add('hidden');
    }
  }
  
  // Initialize search when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SearchManager();
  });
</script>

<style>
  .search-container {
    position: relative;
  }
  
  #search-results {
    max-height: 400px;
    overflow-y: auto;
  }
  
  mark {
    background-color: #fef3c7;
    color: #92400e;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
  }
  
  .dark mark {
    background-color: #451a03;
    color: #fbbf24;
  }
</style> 