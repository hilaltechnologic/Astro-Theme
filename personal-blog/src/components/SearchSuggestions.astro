---
// This component provides search suggestions and autocomplete
---

<div id="search-suggestions" class="hidden absolute top-full left-0 right-0 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 max-h-64 overflow-y-auto">
  <div class="p-4">
    <div class="space-y-2">
      <!-- Recent Searches -->
      <div id="recent-searches" class="space-y-1">
        <h4 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide">Recent Searches</h4>
        <div class="space-y-1">
          <!-- Recent searches will be populated by JavaScript -->
        </div>
      </div>

      <!-- Popular Searches -->
      <div id="popular-searches" class="space-y-1">
        <h4 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide">Popular Searches</h4>
        <div class="space-y-1">
          <button class="suggestion-item w-full text-left px-2 py-1 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
            astro tutorial
          </button>
          <button class="suggestion-item w-full text-left px-2 py-1 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
            tailwind css
          </button>
          <button class="suggestion-item w-full text-left px-2 py-1 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
            web development
          </button>
          <button class="suggestion-item w-full text-left px-2 py-1 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded">
            javascript tips
          </button>
        </div>
      </div>

      <!-- Quick Filters -->
      <div id="quick-filters" class="space-y-1">
        <h4 class="text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide">Quick Filters</h4>
        <div class="flex flex-wrap gap-2">
          <button class="quick-filter px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-full hover:bg-primary-200 dark:hover:bg-primary-800">
            Tutorials
          </button>
          <button class="quick-filter px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-full hover:bg-primary-200 dark:hover:bg-primary-800">
            Tips & Tricks
          </button>
          <button class="quick-filter px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-full hover:bg-primary-200 dark:hover:bg-primary-800">
            Reviews
          </button>
          <button class="quick-filter px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 rounded-full hover:bg-primary-200 dark:hover:bg-primary-800">
            Case Studies
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class SearchSuggestions {
    constructor() {
      this.suggestionsContainer = document.getElementById('search-suggestions');
      this.searchInput = document.querySelector('#advanced-search');
      this.recentSearches = this.loadRecentSearches();
      
      this.init();
    }

    init() {
      this.bindEvents();
      this.populateRecentSearches();
    }

    bindEvents() {
      // Show suggestions on focus
      this.searchInput?.addEventListener('focus', () => {
        this.showSuggestions();
      });

      // Hide suggestions on click outside
      document.addEventListener('click', (e) => {
        if (!this.suggestionsContainer?.contains(e.target) && e.target !== this.searchInput) {
          this.hideSuggestions();
        }
      });

      // Handle suggestion clicks
      this.suggestionsContainer?.addEventListener('click', (e) => {
        if (e.target.classList.contains('suggestion-item')) {
          this.selectSuggestion(e.target.textContent?.trim() || '');
        }
        
        if (e.target.classList.contains('quick-filter')) {
          this.applyQuickFilter(e.target.textContent?.trim() || '');
        }
      });

      // Handle keyboard navigation
      this.searchInput?.addEventListener('keydown', (e) => {
        this.handleKeyboardNavigation(e);
      });
    }

    showSuggestions() {
      this.suggestionsContainer?.classList.remove('hidden');
    }

    hideSuggestions() {
      this.suggestionsContainer?.classList.add('hidden');
    }

    selectSuggestion(text) {
      if (this.searchInput) {
        this.searchInput.value = text;
        this.searchInput.focus();
        
        // Trigger search
        this.searchInput.dispatchEvent(new Event('input'));
        
        // Add to recent searches
        this.addToRecentSearches(text);
        
        this.hideSuggestions();
      }
    }

    applyQuickFilter(filter) {
      // Find the corresponding checkbox and check it
      const checkboxes = document.querySelectorAll('.tag-filter-checkbox, .category-filter-checkbox');
      checkboxes.forEach(checkbox => {
        if (checkbox.value.toLowerCase().includes(filter.toLowerCase())) {
          checkbox.checked = true;
          checkbox.dispatchEvent(new Event('change'));
        }
      });
      
      this.hideSuggestions();
    }

    handleKeyboardNavigation(e) {
      const suggestions = this.suggestionsContainer?.querySelectorAll('.suggestion-item');
      const currentIndex = Array.from(suggestions || []).findIndex(el => el.classList.contains('selected'));
      
      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          this.navigateSuggestions(currentIndex, 1, suggestions);
          break;
        case 'ArrowUp':
          e.preventDefault();
          this.navigateSuggestions(currentIndex, -1, suggestions);
          break;
        case 'Enter':
          e.preventDefault();
          const selectedSuggestion = this.suggestionsContainer?.querySelector('.suggestion-item.selected');
          if (selectedSuggestion) {
            this.selectSuggestion(selectedSuggestion.textContent?.trim() || '');
          }
          break;
        case 'Escape':
          this.hideSuggestions();
          break;
      }
    }

    navigateSuggestions(currentIndex, direction, suggestions) {
      if (!suggestions) return;
      
      const newIndex = currentIndex + direction;
      
      // Remove current selection
      suggestions.forEach(el => el.classList.remove('selected'));
      
      // Add selection to new item
      if (newIndex >= 0 && newIndex < suggestions.length) {
        suggestions[newIndex].classList.add('selected');
      }
    }

    loadRecentSearches() {
      try {
        return JSON.parse(localStorage.getItem('recentSearches') || '[]');
      } catch {
        return [];
      }
    }

    saveRecentSearches() {
      localStorage.setItem('recentSearches', JSON.stringify(this.recentSearches));
    }

    addToRecentSearches(search) {
      // Remove if already exists
      this.recentSearches = this.recentSearches.filter(s => s !== search);
      
      // Add to beginning
      this.recentSearches.unshift(search);
      
      // Keep only last 5 searches
      this.recentSearches = this.recentSearches.slice(0, 5);
      
      this.saveRecentSearches();
      this.populateRecentSearches();
    }

    populateRecentSearches() {
      const recentContainer = document.getElementById('recent-searches')?.querySelector('div');
      if (!recentContainer) return;
      
      recentContainer.innerHTML = '';
      
      this.recentSearches.forEach(search => {
        const button = document.createElement('button');
        button.className = 'suggestion-item w-full text-left px-2 py-1 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded';
        button.textContent = search;
        recentContainer.appendChild(button);
      });
      
      // Hide recent searches section if empty
      const recentSection = document.getElementById('recent-searches');
      if (recentSection) {
        recentSection.style.display = this.recentSearches.length > 0 ? 'block' : 'none';
      }
    }
  }

  // Initialize search suggestions
  new SearchSuggestions();
</script> 