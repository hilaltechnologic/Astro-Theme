---
export interface Props {
  title: string;
  description?: string;
  image?: string;
  canonicalURL?: URL;
  type?: 'website' | 'article' | 'profile' | 'book';
  author?: string;
  publishedTime?: string;
  modifiedTime?: string;
  tags?: string[];
  section?: string;
  readingTime?: number;
  wordCount?: number;
  customStructuredData?: any;
}

const { 
  title, 
  description, 
  image, 
  canonicalURL, 
  type = 'website',
  author,
  publishedTime,
  modifiedTime,
  tags = [],
  section,
  readingTime,
  wordCount,
  customStructuredData
} = Astro.props;

const siteTitle = "My Personal Blog";
const siteDescription = "A personal blog about technology, life, and everything in between";
const siteUrl = "https://your-domain.com";
const siteImage = "/og-image.jpg";

// Generate structured data
const generateStructuredData = () => {
  const baseData = {
    "@context": "https://schema.org",
    "@type": type === 'article' ? 'Article' : 'WebPage',
    "headline": title,
    "description": description || siteDescription,
    "url": canonicalURL?.href || Astro.url.href,
    "image": image || siteImage,
    "author": {
      "@type": "Person",
      "name": author || "Your Name"
    },
    "publisher": {
      "@type": "Organization",
      "name": siteTitle,
      "logo": {
        "@type": "ImageObject",
        "url": `${siteUrl}/logo.png`
      }
    }
  };

  if (type === 'article') {
    return {
      ...baseData,
      "datePublished": publishedTime,
      "dateModified": modifiedTime || publishedTime,
      "articleSection": section,
      "keywords": tags.join(', '),
      "wordCount": wordCount,
      "timeRequired": readingTime ? `PT${readingTime}M` : undefined
    };
  }

  return baseData;
};

const generatedStructuredData = customStructuredData || generateStructuredData();
---

<!-- SEO Meta Tags -->
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="generator" content={Astro.generator} />

<!-- Primary Meta Tags -->
<title>{title ? `${title} | ${siteTitle}` : siteTitle}</title>
<meta name="title" content={title} />
<meta name="description" content={description || siteDescription} />
<meta name="author" content={author || "Your Name"} />
<meta name="robots" content="index, follow" />
<meta name="language" content="English" />

<!-- Canonical URL -->
{canonicalURL && <link rel="canonical" href={canonicalURL} />}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalURL?.href || Astro.url.href} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description || siteDescription} />
<meta property="og:image" content={image || siteImage} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:site_name" content={siteTitle} />
<meta property="og:locale" content="en_US" />

{type === 'article' && (
  <>
    <meta property="article:published_time" content={publishedTime} />
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    <meta property="article:author" content={author} />
    {tags.map(tag => <meta property="article:tag" content={tag} />)}
    {section && <meta property="article:section" content={section} />}
  </>
)}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL?.href || Astro.url.href} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description || siteDescription} />
<meta property="twitter:image" content={image || siteImage} />
<meta property="twitter:creator" content="@yourusername" />
<meta property="twitter:site" content="@yourusername" />

<!-- Additional SEO Meta Tags -->
<meta name="theme-color" content="#0ea5e9" />
<meta name="msapplication-TileColor" content="#0ea5e9" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="default" />
<meta name="apple-mobile-web-app-title" content={siteTitle} />

<!-- Preconnect to external domains for performance -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="preconnect" href="https://www.google-analytics.com" />
<link rel="preconnect" href="https://www.googletagmanager.com" />

<!-- DNS Prefetch for common external resources -->
<link rel="dns-prefetch" href="//www.google-analytics.com" />
<link rel="dns-prefetch" href="//www.googletagmanager.com" />
<link rel="dns-prefetch" href="//fonts.googleapis.com" />

<!-- Structured Data -->
<script type="application/ld+json" set:html={JSON.stringify(generatedStructuredData)} />

<!-- Performance Hints -->
<link rel="preload" href="/fonts/inter-var.woff2" as="font" type="font/woff2" crossorigin />
<link rel="preload" href="/fonts/merriweather-var.woff2" as="font" type="font/woff2" crossorigin />

<!-- Critical CSS inline -->
<style>
  /* Critical CSS for above-the-fold content */
  body { margin: 0; font-family: system-ui, sans-serif; }
  .critical-content { opacity: 1; transition: opacity 0.3s; }
  .loading .critical-content { opacity: 0.5; }
</style>

<!-- Non-critical CSS -->
<link rel="preload" href="/styles.css" as="style" onload="this.onload=null;this.rel='stylesheet'" />
<noscript><link rel="stylesheet" href="/styles.css" /></noscript>

<!-- Favicon -->
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="manifest" href="/site.webmanifest" />

<!-- Security Headers -->
<meta http-equiv="X-Content-Type-Options" content="nosniff" />
<meta http-equiv="X-Frame-Options" content="DENY" />
<meta http-equiv="X-XSS-Protection" content="1; mode=block" />
<meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin" />

<!-- Performance Monitoring -->
<script>
  // Performance monitoring
  window.addEventListener('load', () => {
    // Core Web Vitals
    if ('PerformanceObserver' in window) {
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (entry.entryType === 'largest-contentful-paint') {
            console.log('LCP:', entry.startTime);
            // Send to analytics
          }
          if (entry.entryType === 'first-input') {
            console.log('FID:', entry.processingStart - entry.startTime);
            // Send to analytics
          }
          if (entry.entryType === 'layout-shift') {
            console.log('CLS:', entry.value);
            // Send to analytics
          }
        }
      });
      
      observer.observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] });
    }
    
    // Page load time
    const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
    console.log('Page Load Time:', loadTime + 'ms');
  });
</script> 